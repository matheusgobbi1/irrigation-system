[
    {
        "id": "15e6e17451afcb18",
        "type": "tab",
        "label": "Fluxo 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e3e93718b5e0d56c",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ecdff10be52eb96c",
        "type": "tab",
        "label": "Fluxo 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e62f0f908d84d25b",
        "type": "tab",
        "label": "Fluxo 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ec55f4029d204d7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aa53ceca0e6546ba",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "700456a39f9e7cc5",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Enviar para Whatsapp"
    },
    {
        "id": "c6cf0e5661754894",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d101e21e11da0ccb",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "c2bbdbbe12eac8da",
        "type": "mqtt-broker",
        "name": "",
        "broker": "c078e7a75a7f44888f87d82eb62e17b1.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "8ab76e3db09f2597",
        "clientid": "node-red-client",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "teste/topic",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8ab76e3db09f2597",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "f5529d96f7c181c7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "test/topic",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "Hello from MQTT Explorer.",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f0b38fb94b0858f4",
        "type": "mqtt-broker",
        "name": "",
        "broker": "c078e7a75a7f44888f87d82eb62e17b1.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ccdf9748d1109862",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "5d2cce3e7f4aac2c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "732cbb1c53ea4821",
        "type": "inject",
        "z": "15e6e17451afcb18",
        "name": "Buscar OpenWeather",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2000,
        "wires": [
            [
                "c4e52b2a9b01002a"
            ]
        ]
    },
    {
        "id": "c4e52b2a9b01002a",
        "type": "http request",
        "z": "15e6e17451afcb18",
        "name": "Requisição OpenWeather",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Sao%20Paulo,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 2000,
        "wires": [
            [
                "544ace8f88957bf2"
            ]
        ]
    },
    {
        "id": "544ace8f88957bf2",
        "type": "function",
        "z": "15e6e17451afcb18",
        "name": "Processar OpenWeather",
        "func": "let payload = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : msg.payload;\n\nif (payload && payload.main) {\n    // Extraindo apenas as informações desejadas\n    msg.payload = {\n        temperature: payload.main.temp,        // Temperatura\n        humidity: payload.main.humidity,      // Umidade\n        soilHumidity: Math.floor(Math.random() * (50 - 10 + 1) + 10) // Umidade do solo simulada\n    };\n    return msg;\n} else {\n    // Retornar erro caso o payload não contenha os dados esperados\n    node.warn(\"Payload inválido ou incompleto: \" + JSON.stringify(payload));\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2000,
        "wires": [
            [
                "ea28b0b9fa1d364c"
            ]
        ]
    },
    {
        "id": "ea28b0b9fa1d364c",
        "type": "switch",
        "z": "15e6e17451afcb18",
        "name": "",
        "property": "payload.main.humidity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "30",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "30",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 2160,
        "wires": [
            [
                "fb9153c4c03621f1"
            ],
            [
                "79690f4e8a7a4cc8"
            ]
        ]
    },
    {
        "id": "97b54ec469c1d562",
        "type": "mqtt out",
        "z": "15e6e17451afcb18",
        "name": "",
        "topic": "irrigation/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa53ceca0e6546ba",
        "x": 1240,
        "y": 2180,
        "wires": []
    },
    {
        "id": "79690f4e8a7a4cc8",
        "type": "change",
        "z": "15e6e17451afcb18",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "desligar ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 2240,
        "wires": [
            [
                "97b54ec469c1d562"
            ]
        ]
    },
    {
        "id": "fb9153c4c03621f1",
        "type": "change",
        "z": "15e6e17451afcb18",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ligar",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 2120,
        "wires": [
            [
                "97b54ec469c1d562"
            ]
        ]
    },
    {
        "id": "3e96782bafdea18e",
        "type": "http request",
        "z": "15e6e17451afcb18",
        "name": "Obter Clima SP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Sao%20Paulo,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "0eab7bee2895eed2"
            ]
        ]
    },
    {
        "id": "0eab7bee2895eed2",
        "type": "function",
        "z": "15e6e17451afcb18",
        "name": "Processar Dados ",
        "func": "// Constantes para maior legibilidade\nconst LOCATIONS = [\"SP\", \"RJ\"];\nconst THRESHOLDS = {\n    soilMoistureLow: 30,\n    soilMoistureHigh: 70,\n    rainHigh: 70,\n    tempHigh: 30,\n    humidityLow: 40\n};\n\n// Identificar localização\nfunction getLocation(topic) {\n    if (topic.includes(\"sp\")) return \"SP\";\n    if (topic.includes(\"rj\")) return \"RJ\";\n    node.warn(`Tópico desconhecido: ${topic}`);\n    return null;\n}\n\n// Processar dados de umidade do solo\nfunction processSoilMoisture(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    if (!payload || typeof payload.soilMoisture === \"undefined\") {\n        node.warn(\"Dados de umidade do solo inválidos ou ausentes.\");\n        return null;\n    }\n\n    context.set(`soilMoisture_${location}`, payload.soilMoisture);\n    return null; // Não envia mensagem ainda\n}\n\n// Processar dados climáticos\nfunction processWeatherData(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    const weatherData = typeof payload === \"string\" ? JSON.parse(payload) : payload;\n    if (!weatherData || !weatherData.main) {\n        node.warn(\"Dados de clima inválidos ou ausentes.\");\n        return null;\n    }\n\n    // Extrair dados climáticos\n    const temp = parseFloat(weatherData.main.temp);\n    const humidity = parseFloat(weatherData.main.humidity);\n    const rain = parseFloat(weatherData.rain ? weatherData.rain[\"1h\"] || 0 : 0);\n\n    const soilMoisture = context.get(`soilMoisture_${location}`);\n    if (typeof soilMoisture === \"undefined\") {\n        node.warn(`Aguardando dados do sensor de umidade do solo para ${location}...`);\n        return null;\n    }\n\n    // Lógica de decisão\n    let command;\n    if (soilMoisture < THRESHOLDS.soilMoistureLow) {\n        command = \"ligar\";\n    } else if (rain > THRESHOLDS.rainHigh || soilMoisture > THRESHOLDS.soilMoistureHigh) {\n        command = \"desligar\";\n    } else if (temp > THRESHOLDS.tempHigh && humidity < THRESHOLDS.humidityLow && soilMoisture < 30) {\n        command = \"ligar\";\n    } else {\n        command = \"desligar\";\n    }\n\n    // Preparar mensagem para envio\n    return {\n        payload: {\n            location: location,\n            temp: temp,\n            humidity: humidity,\n            rain: rain,\n            soilMoisture: soilMoisture,\n            command: command\n        },\n        measurement: `${location}` // Nome do measurement para InfluxDB\n    };\n}\n\n// Processar mensagem\nif (msg.topic.includes(\"sensor/soil_moisture\")) {\n    return processSoilMoisture(msg.topic, msg.payload);\n} else if (msg.topic.includes(\"clima\")) {\n    const processedMsg = processWeatherData(msg.topic, msg.payload);\n    if (processedMsg) {\n        node.status({\n            fill: \"blue\",\n            shape: \"dot\",\n            text: `Dados enviados para ${processedMsg.payload.location}`\n        });\n    }\n    return processedMsg;\n} else {\n    node.warn(\"Tópico não reconhecido.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "021cd5967225d6e7"
            ]
        ]
    },
    {
        "id": "4ad90c5cd42a49e8",
        "type": "switch",
        "z": "15e6e17451afcb18",
        "name": "Interruptor ",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ligar_RJ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_RJ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 460,
        "wires": [
            [
                "4958d6b6f914499f"
            ],
            [
                "106a33be3c3a1807"
            ],
            [
                "6e761fcdfc27db4b"
            ],
            [
                "44cd6eeb393569c0"
            ]
        ]
    },
    {
        "id": "4958d6b6f914499f",
        "type": "mqtt out",
        "z": "15e6e17451afcb18",
        "name": "",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1200,
        "y": 380,
        "wires": []
    },
    {
        "id": "106a33be3c3a1807",
        "type": "mqtt out",
        "z": "15e6e17451afcb18",
        "name": "irrigation/control",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa53ceca0e6546ba",
        "x": 1200,
        "y": 440,
        "wires": []
    },
    {
        "id": "b2a4e283af84547e",
        "type": "mqtt in",
        "z": "15e6e17451afcb18",
        "name": "Sensor SP",
        "topic": "sensor/soil_moisture/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 540,
        "y": 100,
        "wires": [
            [
                "0eab7bee2895eed2"
            ]
        ]
    },
    {
        "id": "a75a85a816d508b4",
        "type": "inject",
        "z": "15e6e17451afcb18",
        "name": "clima/sp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/sp",
        "payload": "0",
        "payloadType": "num",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "3e96782bafdea18e"
            ]
        ]
    },
    {
        "id": "7b59a34c09640171",
        "type": "http request",
        "z": "15e6e17451afcb18",
        "name": "Obter Clima RJ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Rio%20de%20Janeiro,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "0eab7bee2895eed2"
            ]
        ]
    },
    {
        "id": "e27949cb55656b53",
        "type": "inject",
        "z": "15e6e17451afcb18",
        "name": "clima/rj",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/rj",
        "payload": "0",
        "payloadType": "num",
        "x": 480,
        "y": 240,
        "wires": [
            [
                "7b59a34c09640171"
            ]
        ]
    },
    {
        "id": "021cd5967225d6e7",
        "type": "function",
        "z": "15e6e17451afcb18",
        "name": "preparar interruptor ",
        "func": "msg.topic = `${msg.payload.command}_${msg.payload.location}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 460,
        "wires": [
            [
                "4ad90c5cd42a49e8"
            ]
        ]
    },
    {
        "id": "6e761fcdfc27db4b",
        "type": "mqtt out",
        "z": "15e6e17451afcb18",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "44cd6eeb393569c0",
        "type": "mqtt out",
        "z": "15e6e17451afcb18",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1210,
        "y": 560,
        "wires": []
    },
    {
        "id": "05b9b9c730a68d83",
        "type": "debug",
        "z": "15e6e17451afcb18",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 180,
        "wires": []
    },
    {
        "id": "e34ebad77b93ad47",
        "type": "influxdb out",
        "z": "15e6e17451afcb18",
        "influxdb": "ccdf9748d1109862",
        "name": "influxdb",
        "measurement": "clima",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "mackenzie",
        "bucket": "clima_db",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "6a2f3701778284e9",
        "type": "http request",
        "z": "e3e93718b5e0d56c",
        "name": "Obter Clima SP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Sao%20Paulo,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2380,
        "y": 180,
        "wires": [
            [
                "ebccd4674515059c"
            ]
        ]
    },
    {
        "id": "ebccd4674515059c",
        "type": "function",
        "z": "e3e93718b5e0d56c",
        "name": "Processar Dados ",
        "func": "// Constantes para maior legibilidade\nconst THRESHOLDS = {\n    soilMoistureLow: 30,\n    soilMoistureHigh: 70,\n    rainHigh: 70,\n    tempHigh: 30,\n    humidityLow: 40\n};\n\n// Função para identificar a localização com base no tópico\nfunction getLocation(topic) {\n    if (!topic) {\n        node.warn(\"Tópico não encontrado.\");\n        return null;\n    }\n    if (topic.includes(\"sp\")) return \"SP\";\n    if (topic.includes(\"rj\")) return \"RJ\";\n    node.warn(`Tópico desconhecido: ${topic}`);\n    return null;\n}\n\n// Processar dados de umidade do solo\nfunction processSoilMoisture(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    if (!payload || typeof payload.soilMoisture === \"undefined\") {\n        node.warn(\"Dados de umidade do solo inválidos ou ausentes.\");\n        return null;\n    }\n\n    // Salvar umidade do solo no contexto\n    context.set(`soilMoisture_${location}`, payload.soilMoisture);\n    node.status({ fill: \"green\", shape: \"dot\", text: `Umidade do solo salva para ${location}` });\n    return null;\n}\n\n// Processar dados climáticos\nfunction processWeatherData(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    // Garantir que os dados climáticos estão no formato correto\n    const weatherData = typeof payload === \"string\" ? JSON.parse(payload) : payload;\n    if (!weatherData || !weatherData.main) {\n        node.warn(\"Dados climáticos inválidos ou ausentes.\");\n        return null;\n    }\n\n    const temp = parseFloat(weatherData.main.temp);\n    const humidity = parseFloat(weatherData.main.humidity);\n    const rain = parseFloat(weatherData.rain ? weatherData.rain[\"1h\"] || 0 : 0);\n\n    const soilMoisture = context.get(`soilMoisture_${location}`);\n    if (typeof soilMoisture === \"undefined\") {\n        node.warn(`Aguardando dados de umidade do solo para ${location}...`);\n        return null;\n    }\n\n    // Lógica de decisão para comando\n    let command;\n    if (soilMoisture < THRESHOLDS.soilMoistureLow) {\n        command = \"ligar\";\n    } else if (rain > THRESHOLDS.rainHigh || soilMoisture > THRESHOLDS.soilMoistureHigh) {\n        command = \"desligar\";\n    } else if (temp > THRESHOLDS.tempHigh && humidity < THRESHOLDS.humidityLow && soilMoisture < 30) {\n        command = \"ligar\";\n    } else {\n        command = \"desligar\";\n    }\n\n    // Preparar mensagem para enviar ao próximo nó\n    return {\n        measurement: \"sensor_data\",\n        tags: {\n            location: location // Define 'location' como uma tag\n        },\n        fields: {\n            command: command,       // Comando gerado (ligar/desligar)\n            temp: temp,             // Temperatura\n            humidity: humidity,     // Umidade\n            rain: rain,             // Chuva\n            soilMoisture: soilMoisture // Umidade do solo\n        },\n        payload: {\n            command: command,\n            location: location,\n            temp: temp,\n            humidity: humidity,\n            rain: rain,\n            soilMoisture: soilMoisture\n        }\n    };\n}\n\n// Processar mensagens recebidas\nif (!msg.payload) {\n    node.warn(\"Payload ausente.\");\n    return null;\n}\n\n// Determinar localização a partir do tópico\nconst location = getLocation(msg.topic);\nif (!location) {\n    node.warn(\"Localização não identificada.\");\n    return null;\n}\n\n// Processar dados com base no tópico\nif (msg.topic.includes(\"sensor/soil_moisture\")) {\n    processSoilMoisture(msg.topic, msg.payload);\n    return null;\n} else if (msg.topic.includes(\"clima\")) {\n    const processedMsg = processWeatherData(msg.topic, msg.payload);\n    if (processedMsg) {\n        node.status({ fill: \"blue\", shape: \"dot\", text: `Comando gerado para ${processedMsg.payload.location}` });\n        return processedMsg;\n    }\n    return null;\n} else {\n    node.warn(\"Tópico não reconhecido.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 180,
        "wires": [
            [
                "53a1ce93982308c1"
            ]
        ]
    },
    {
        "id": "4310c4bbdb7158e4",
        "type": "switch",
        "z": "e3e93718b5e0d56c",
        "name": "Interruptor ",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ligar_RJ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_RJ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2690,
        "y": 460,
        "wires": [
            [
                "c92d485e881be991"
            ],
            [
                "ba8b59b1916c17e1"
            ],
            [
                "7d16cc0ab3e085dd"
            ],
            [
                "1cab474fe9e8a96c"
            ]
        ]
    },
    {
        "id": "c92d485e881be991",
        "type": "mqtt out",
        "z": "e3e93718b5e0d56c",
        "name": "",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 2940,
        "y": 380,
        "wires": []
    },
    {
        "id": "ba8b59b1916c17e1",
        "type": "mqtt out",
        "z": "e3e93718b5e0d56c",
        "name": "irrigation/control",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa53ceca0e6546ba",
        "x": 2940,
        "y": 440,
        "wires": []
    },
    {
        "id": "b5fca258a5078d71",
        "type": "mqtt in",
        "z": "e3e93718b5e0d56c",
        "name": "Sensor SP",
        "topic": "sensor/soil_moisture/sp",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2280,
        "y": 80,
        "wires": [
            [
                "ebccd4674515059c"
            ]
        ]
    },
    {
        "id": "98b9fce2d318f3a2",
        "type": "inject",
        "z": "e3e93718b5e0d56c",
        "name": "clima/sp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/sp",
        "payload": "0",
        "payloadType": "num",
        "x": 2200,
        "y": 180,
        "wires": [
            [
                "6a2f3701778284e9"
            ]
        ]
    },
    {
        "id": "ee9d9d1b95c41b82",
        "type": "http request",
        "z": "e3e93718b5e0d56c",
        "name": "Obter Clima RJ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Rio%20de%20Janeiro,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2380,
        "y": 240,
        "wires": [
            [
                "ebccd4674515059c"
            ]
        ]
    },
    {
        "id": "64dc5028c83a8379",
        "type": "mqtt in",
        "z": "e3e93718b5e0d56c",
        "name": "Sensor RJ",
        "topic": "sensor/soil_moisture/rj",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2280,
        "y": 320,
        "wires": [
            [
                "ebccd4674515059c"
            ]
        ]
    },
    {
        "id": "98a7d18609433336",
        "type": "inject",
        "z": "e3e93718b5e0d56c",
        "name": "clima/rj",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/rj",
        "payload": "0",
        "payloadType": "num",
        "x": 2200,
        "y": 240,
        "wires": [
            [
                "ee9d9d1b95c41b82"
            ]
        ]
    },
    {
        "id": "53a1ce93982308c1",
        "type": "function",
        "z": "e3e93718b5e0d56c",
        "name": "preparar interruptor ",
        "func": "if (!msg.payload || !msg.payload.command || !msg.payload.location) {\n    node.warn(\"Mensagem inválida recebida no 'preparar interruptor'.\");\n    return null;\n}\n\n// Preparar o tópico para o interruptor\nmsg.topic = `${msg.payload.command}_${msg.payload.location}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 460,
        "wires": [
            [
                "4310c4bbdb7158e4"
            ]
        ]
    },
    {
        "id": "7d16cc0ab3e085dd",
        "type": "mqtt out",
        "z": "e3e93718b5e0d56c",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 2950,
        "y": 500,
        "wires": []
    },
    {
        "id": "1cab474fe9e8a96c",
        "type": "mqtt out",
        "z": "e3e93718b5e0d56c",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 2950,
        "y": 560,
        "wires": []
    },
    {
        "id": "2f99de48eddad0fc",
        "type": "debug",
        "z": "e3e93718b5e0d56c",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 180,
        "wires": []
    },
    {
        "id": "abcdf146307ec201",
        "type": "influxdb out",
        "z": "e3e93718b5e0d56c",
        "influxdb": "5d2cce3e7f4aac2c",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "mackenzie",
        "bucket": "sensor_data",
        "x": 2890,
        "y": 80,
        "wires": []
    },
    {
        "id": "779571074211c832",
        "type": "function",
        "z": "ecdff10be52eb96c",
        "name": "Processar Dados ",
        "func": "// Constantes para maior legibilidade\nconst LOCATIONS = [\"SP\", \"RJ\"];\nconst THRESHOLDS = {\n    soilMoistureLow: 30,\n    soilMoistureHigh: 70,\n    rainHigh: 70,\n    tempHigh: 30,\n    humidityLow: 40\n};\n\n// Identificar localização\nfunction getLocation(topic) {\n    if (topic.includes(\"sp\")) return \"SP\";\n    if (topic.includes(\"rj\")) return \"RJ\";\n    node.warn(`Tópico desconhecido: ${topic}`);\n    return null;\n}\n\n// Processar dados de umidade do solo\nfunction processSoilMoisture(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    if (!payload || typeof payload.soilMoisture === \"undefined\") {\n        node.warn(\"Dados de umidade do solo inválidos ou ausentes.\");\n        return null;\n    }\n\n    context.set(`soilMoisture_${location}`, payload.soilMoisture);\n    return null; // Não envia mensagem ainda\n}\n\n// Processar dados climáticos\nfunction processWeatherData(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    if (!payload || typeof payload.temp === \"undefined\" || typeof payload.humidity === \"undefined\" || typeof payload.rain === \"undefined\") {\n        node.warn(\"Dados climáticos inválidos ou ausentes.\");\n        return null;\n    }\n\n    // Extrair dados climáticos\n    const temp = parseFloat(payload.temp);\n    const humidity = parseFloat(payload.humidity);\n    const rain = parseFloat(payload.rain);\n\n    const soilMoisture = context.get(`soilMoisture_${location}`);\n    if (typeof soilMoisture === \"undefined\") {\n        node.warn(`Aguardando dados do sensor de umidade do solo para ${location}...`);\n        return null;\n    }\n\n    // Lógica de decisão\n    let command;\n    if (soilMoisture < THRESHOLDS.soilMoistureLow) {\n        command = \"ligar\";\n    } else if (rain > THRESHOLDS.rainHigh || soilMoisture > THRESHOLDS.soilMoistureHigh) {\n        command = \"desligar\";\n    } else if (temp > THRESHOLDS.tempHigh && humidity < THRESHOLDS.humidityLow && soilMoisture < 30) {\n        command = \"ligar\";\n    } else {\n        command = \"desligar\";\n    }\n\n    // Preparar mensagem para envio\n    return {\n        payload: {\n            location: location,\n            temp: temp,\n            humidity: humidity,\n            rain: rain,\n            soilMoisture: soilMoisture,\n            command: command\n        },\n        measurement: `${location}` // Nome do measurement para InfluxDB\n    };\n}\n\n// Processar mensagem\nif (msg.topic.includes(\"sensor/soil_moisture\")) {\n    // Processar dados de umidade do solo\n    return processSoilMoisture(msg.topic, msg.payload);\n} else if (msg.topic.includes(\"sensor/weather\")) {\n    // Processar dados climáticos\n    const processedMsg = processWeatherData(msg.topic, msg.payload);\n    if (processedMsg) {\n        node.status({\n            fill: \"blue\",\n            shape: \"dot\",\n            text: `Dados enviados para ${processedMsg.payload.location}`\n        });\n    }\n    return processedMsg;\n} else {\n    node.warn(\"Tópico não reconhecido.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "6b5dd6e5da264304"
            ]
        ]
    },
    {
        "id": "784b5b1768783c69",
        "type": "switch",
        "z": "ecdff10be52eb96c",
        "name": "Interruptor ",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ligar_RJ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_RJ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "d91520bc2d5af8a1"
            ],
            [
                "937bf1da3055df5b"
            ],
            [
                "fc5b0a9ac9432eb4"
            ],
            [
                "829ac1cd8543e090"
            ]
        ]
    },
    {
        "id": "d91520bc2d5af8a1",
        "type": "mqtt out",
        "z": "ecdff10be52eb96c",
        "name": "",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1140,
        "y": 480,
        "wires": []
    },
    {
        "id": "937bf1da3055df5b",
        "type": "mqtt out",
        "z": "ecdff10be52eb96c",
        "name": "irrigation/control",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa53ceca0e6546ba",
        "x": 1140,
        "y": 540,
        "wires": []
    },
    {
        "id": "e78783d0f25c6d5a",
        "type": "mqtt in",
        "z": "ecdff10be52eb96c",
        "name": "Sensor umidade",
        "topic": "sensor/soil_moisture/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "779571074211c832"
            ]
        ]
    },
    {
        "id": "6b5dd6e5da264304",
        "type": "function",
        "z": "ecdff10be52eb96c",
        "name": "preparar interruptor ",
        "func": "msg.topic = `${msg.payload.command}_${msg.payload.location}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 560,
        "wires": [
            [
                "784b5b1768783c69"
            ]
        ]
    },
    {
        "id": "fc5b0a9ac9432eb4",
        "type": "mqtt out",
        "z": "ecdff10be52eb96c",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1150,
        "y": 600,
        "wires": []
    },
    {
        "id": "829ac1cd8543e090",
        "type": "mqtt out",
        "z": "ecdff10be52eb96c",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "9587f434a924943a",
        "type": "influxdb out",
        "z": "ecdff10be52eb96c",
        "influxdb": "ccdf9748d1109862",
        "name": "influxdb",
        "measurement": "clima",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "mackenzie",
        "bucket": "clima_db",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "ab9c8115e6e1ece3",
        "type": "mqtt in",
        "z": "ecdff10be52eb96c",
        "name": "Sensor temperatura",
        "topic": "sensor/weather/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "779571074211c832"
            ]
        ]
    },
    {
        "id": "1097cb4893d7b53f",
        "type": "debug",
        "z": "ecdff10be52eb96c",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "85acf1ac3bb6d074",
        "type": "debug",
        "z": "ecdff10be52eb96c",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "e5670830c1db6fe3",
        "type": "debug",
        "z": "ecdff10be52eb96c",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "27a4cc7005194eb5",
        "type": "http request",
        "z": "e62f0f908d84d25b",
        "name": "Obter Clima SP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Sao%20Paulo,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "6ea4286387a3d062"
            ]
        ]
    },
    {
        "id": "6ea4286387a3d062",
        "type": "function",
        "z": "e62f0f908d84d25b",
        "name": "Processar Dados ",
        "func": "// Constantes para maior legibilidade\nconst LOCATIONS = [\"SP\", \"RJ\"];\nconst THRESHOLDS = {\n    soilMoistureLow: 30,\n    soilMoistureHigh: 70,\n    rainHigh: 70,\n    tempHigh: 30,\n    humidityLow: 40\n};\n\n// Identificar localização\nfunction getLocation(topic) {\n    if (topic.includes(\"sp\")) return \"SP\";\n    if (topic.includes(\"rj\")) return \"RJ\";\n    node.warn(`Tópico desconhecido: ${topic}`);\n    return null;\n}\n\n// Processar dados de umidade do solo\nfunction processSoilMoisture(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    if (!payload || typeof payload.soilMoisture === \"undefined\") {\n        node.warn(\"Dados de umidade do solo inválidos ou ausentes.\");\n        return null;\n    }\n\n    context.set(`soilMoisture_${location}`, payload.soilMoisture);\n    return null; // Não envia mensagem ainda\n}\n\n// Processar dados climáticos\nfunction processWeatherData(topic, payload) {\n    const location = getLocation(topic);\n    if (!location) return null;\n\n    const weatherData = typeof payload === \"string\" ? JSON.parse(payload) : payload;\n    if (!weatherData || !weatherData.main) {\n        node.warn(\"Dados de clima inválidos ou ausentes.\");\n        return null;\n    }\n\n    // Extrair dados climáticos\n    const temp = parseFloat(weatherData.main.temp);\n    const humidity = parseFloat(weatherData.main.humidity);\n    const rain = parseFloat(weatherData.rain ? weatherData.rain[\"1h\"] || 0 : 0);\n\n    const soilMoisture = context.get(`soilMoisture_${location}`);\n    if (typeof soilMoisture === \"undefined\") {\n        node.warn(`Aguardando dados do sensor de umidade do solo para ${location}...`);\n        return null;\n    }\n\n    // Lógica de decisão\n    let command;\n    if (soilMoisture < THRESHOLDS.soilMoistureLow) {\n        command = \"ligar\";\n    } else if (rain > THRESHOLDS.rainHigh || soilMoisture > THRESHOLDS.soilMoistureHigh) {\n        command = \"desligar\";\n    } else if (temp > THRESHOLDS.tempHigh && humidity < THRESHOLDS.humidityLow && soilMoisture < 30) {\n        command = \"ligar\";\n    } else {\n        command = \"desligar\";\n    }\n\n    // Preparar mensagem para envio\n    return {\n        payload: {\n            location: location,\n            temp: temp,\n            humidity: humidity,\n            rain: rain,\n            soilMoisture: soilMoisture,\n            command: command\n        },\n        measurement: `${location}` // Nome do measurement para InfluxDB\n    };\n}\n\n// Processar mensagem\nif (msg.topic.includes(\"sensor/soil_moisture\")) {\n    return processSoilMoisture(msg.topic, msg.payload);\n} else if (msg.topic.includes(\"clima\")) {\n    const processedMsg = processWeatherData(msg.topic, msg.payload);\n    if (processedMsg) {\n        node.status({\n            fill: \"blue\",\n            shape: \"dot\",\n            text: `Dados enviados para ${processedMsg.payload.location}`\n        });\n    }\n    return processedMsg;\n} else {\n    node.warn(\"Tópico não reconhecido.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "e6484f419fbfc14e",
                "8ca62114713519e4"
            ]
        ]
    },
    {
        "id": "7cb048ad79ac9683",
        "type": "switch",
        "z": "e62f0f908d84d25b",
        "name": "Interruptor ",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_SP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ligar_RJ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "desligar_RJ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 930,
        "y": 580,
        "wires": [
            [
                "889e355988596295"
            ],
            [
                "545d6973e329d978"
            ],
            [
                "9e94dc379cd3c5f8"
            ],
            [
                "04fba6f5cf95a671"
            ]
        ]
    },
    {
        "id": "889e355988596295",
        "type": "mqtt out",
        "z": "e62f0f908d84d25b",
        "name": "",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1180,
        "y": 500,
        "wires": []
    },
    {
        "id": "545d6973e329d978",
        "type": "mqtt out",
        "z": "e62f0f908d84d25b",
        "name": "irrigation/control",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa53ceca0e6546ba",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "4ad31943224decef",
        "type": "mqtt in",
        "z": "e62f0f908d84d25b",
        "name": "Sensor SP",
        "topic": "sensor/soil_moisture/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 200,
        "wires": [
            [
                "6ea4286387a3d062"
            ]
        ]
    },
    {
        "id": "3db9b39774f8d236",
        "type": "inject",
        "z": "e62f0f908d84d25b",
        "name": "clima/sp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/sp",
        "payload": "0",
        "payloadType": "num",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "27a4cc7005194eb5"
            ]
        ]
    },
    {
        "id": "fccad2bf2c8929e3",
        "type": "http request",
        "z": "e62f0f908d84d25b",
        "name": "Obter Clima RJ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Rio%20de%20Janeiro,BR&appid=35c66a9fea068fe6943a4a58cfd1674b&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "6ea4286387a3d062"
            ]
        ]
    },
    {
        "id": "d8258c48dbb40855",
        "type": "inject",
        "z": "e62f0f908d84d25b",
        "name": "clima/rj",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "clima/rj",
        "payload": "0",
        "payloadType": "num",
        "x": 460,
        "y": 360,
        "wires": [
            [
                "fccad2bf2c8929e3"
            ]
        ]
    },
    {
        "id": "e6484f419fbfc14e",
        "type": "function",
        "z": "e62f0f908d84d25b",
        "name": "preparar interruptor ",
        "func": "msg.topic = `${msg.payload.command}_${msg.payload.location}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "7cb048ad79ac9683"
            ]
        ]
    },
    {
        "id": "9e94dc379cd3c5f8",
        "type": "mqtt out",
        "z": "e62f0f908d84d25b",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1190,
        "y": 620,
        "wires": []
    },
    {
        "id": "04fba6f5cf95a671",
        "type": "mqtt out",
        "z": "e62f0f908d84d25b",
        "name": "irrigation/rj/control",
        "topic": "irrigation/rj/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6cf0e5661754894",
        "x": 1190,
        "y": 680,
        "wires": []
    },
    {
        "id": "8ca62114713519e4",
        "type": "debug",
        "z": "e62f0f908d84d25b",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 280,
        "wires": []
    },
    {
        "id": "7fbe480d5b1f5b9a",
        "type": "influxdb out",
        "z": "e62f0f908d84d25b",
        "influxdb": "ccdf9748d1109862",
        "name": "influxdb",
        "measurement": "clima",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "mackenzie",
        "bucket": "clima_db",
        "x": 1060,
        "y": 200,
        "wires": []
    },
    {
        "id": "2afe6cd1be916e92",
        "type": "mqtt in",
        "z": "e62f0f908d84d25b",
        "name": "Sensor RJ",
        "topic": "sensor/soil_moisture/rj",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c6cf0e5661754894",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "6ea4286387a3d062"
            ]
        ]
    }
]